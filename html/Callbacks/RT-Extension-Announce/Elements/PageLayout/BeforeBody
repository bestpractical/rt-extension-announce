%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 2012 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}

<div id="announce">
<table class="announce">
%my $rows = 1;
%foreach my $ticket ( @tickets ){
  <tr><td class="announce_subject">
% if( $show_ticket_links{$ticket->Id} ){
  <a class="announce_subject"
     href="<% RT->Config->Get('WebPath') %>/Ticket/Display.html?id=<% $ticket->Id %>">
  <% $ticket->Subject %></a>
% }else{
  <% $ticket->Subject %>
% }
  </td>
  <td>
<%perl>
  my $txns = $ticket->Transactions;
  for my $type ( qw(Create Correspond) ){
      $txns->Limit( FIELD => 'Type', VALUE => $type );
  }
  $txns->OrderBy( FIELD => 'Created', ORDER => 'DESC' );
  $txns->RowsPerPage(1);

  my $show_html = RT::Config->Get('RTAnnounceAllowHTML') || 0;
  my $content = $show_html ? $txns->First->Content(Type => 'text/html') : $txns->First->Content(Type => 'text/plain');

  if( length $content > $MaxMessageLength ){
    $content = substr($content, 0, $MaxMessageLength);
    # Try to break at a word boundary.
    $content =~ s/^(.*)\b\w+$/$1/g;
    $content =~ s/\s+$//g; # Remove trailing space
    $content .= chr(8230); # Ellipsis character
  }

  use Mojo::Dom;
  my $dom = Mojo::DOM->new( $content );

  my @lines;
  if ( $show_html ) {
    for my $line ( $dom->find('*')->map('text')->each ) {
      # We do not care about strings with only white space
      next unless $line =~ /\S/;

      # Find the HTML element matching our text, not just the text component
      my $matches = $dom->find('*')->grep(sub { $_->all_text =~ /$line/ });
      unless ( $matches->size ) {
        RT::Logger->error("Could not find HTML component matching text content: $line");
        next;
      }
      foreach my $match ( $matches->each ) {
        # We do not want to grab any parent elements
        next if $match->children->size;
        push @lines, $match->to_string;

        # Remove the current node so that we do not end up with duplicates
        $dom = $match->remove->root;
        # No need to continue looking for matching elements
        last;
      }
    }
  } else {
    # Split just on line breaks
    @lines = split ( "\n", $content );
  }
  my $line_count_limit = RT::Config->Get('RTAnnounceLineCountLimit');
  if ( $line_count_limit && scalar @lines > $line_count_limit && $show_html ) {
    # This is our overflow content that will be cutoff in the scroll box
    my $dom_cutoff = Mojo::DOM->new();

    my $count = 0;
    for my $line ( @lines ) {
      if ( $count eq $line_count_limit ) {
        # Placeholder element to be replaced with overflow CSS div
        $dom_cutoff = $dom_cutoff->append_content( '<p id="RTAnnounceOverflowStart">' );
      }
      $dom_cutoff = $dom_cutoff->append_content( $line );
      $count = $count + 1;
    }
    # Wrap our content in a scrollable div since we have more lines than we want to display
    $content = $dom_cutoff->content;

    # Replace our placeholder element with the overflow div
    $content =~ s/\<p id="RTAnnounceOverflowStart"\>\<\/p\>/\<div class="RTAnnounceBannerOverflow overflow-ellipsis"\>/;

    # Close the overflow div at the end of the content
    $content .= '</div>';
  }

</%perl>
<div class="RTAnnounceScrollable">
% if ( $show_html ) {
  <% $content |n %>
% } else {
  <% $content %>
% }
</div>
%if( $show_ticket_links{$ticket->Id} ){
 (<a class="announcements_detail" href="<% RT->Config->Get('WebPath') %>/Ticket/Display.html?id=<% $ticket->Id %>">more</a>)
%}
</td>
<td class="date">
<% $ticket->LastUpdatedObj->AsString %>
</td>
</tr>
% if( $rows == $ShowTickets && (scalar @tickets) > $ShowTickets ){
%   # More announcements, initially hidden.
<tr><td colspan=2 class="toggle_announcements">
<a href='#' class="toggle_announcements" id="toggle_announcements">More Announcements</a>
</td>
</tr>
<tbody id="more_announcements">
% }
%$rows++;
%}
%if( $rows >= $ShowTickets ){
</tbody>
%}
</table></div>
<%INIT>
# Only display on Homepage
if ( RT->Config->Get('ShowAnnouncementsInSelfService') ) {
    return
      unless ( $m->request_comp->path =~ m{^/(?:SelfService/)?index\.html$} );
}
else {
    return unless ( $m->request_comp->path =~ m{^/index\.html$} );
}

my @tickets = RT::Extension::Announce::GetAnnouncements($session{CurrentUser});

# Current user isn't in any groups that can see tickets.
return if @tickets == 0;

# Don't show links if users can't view the announce tickets.
my %show_ticket_links;

my $who = $session{CurrentUser}->Name;
foreach my $ticket ( @tickets ){
    if ( $ticket->HasRight( Right     => 'ShowTicket',
                            Principal => $session{'CurrentUser'} )){
        $show_ticket_links{$ticket->Id} = 1;
    }
    else{
        $RT::Logger->debug("User $who does not have "
          . "the ShowTicket right for ticket " . $ticket->Id . "  and will not see links to "
          . 'this announcement ticket.');
    }
}

</%INIT>
<%ARGS>
$ShowTickets => 2
$MaxMessageLength => 300
</%ARGS>
