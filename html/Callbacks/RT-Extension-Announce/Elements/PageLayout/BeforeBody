%# BEGIN BPS TAGGED BLOCK {{{
%# 
%# COPYRIGHT:
%# 
%# This software is Copyright (c) 2012 Best Practical Solutions, LLC
%#                                          <sales@bestpractical.com>
%# 
%# (Except where explicitly superseded by other copyright notices)
%# 
%# 
%# LICENSE:
%# 
%# This work is made available to you under the terms of Version 2 of
%# the GNU General Public License. A copy of that license should have
%# been provided with this software, but in any event can be snarfed
%# from www.gnu.org.
%# 
%# This work is distributed in the hope that it will be useful, but
%# WITHOUT ANY WARRANTY; without even the implied warranty of
%# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%# General Public License for more details.
%# 
%# You should have received a copy of the GNU General Public License
%# along with this program; if not, write to the Free Software
%# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
%# 02110-1301 or visit their web page on the internet at
%# http://www.gnu.org/licenses/old-licenses/gpl-2.0.html.
%# 
%# 
%# CONTRIBUTION SUBMISSION POLICY:
%# 
%# (The following paragraph is not intended to limit the rights granted
%# to you to modify and distribute this software under the terms of
%# the GNU General Public License and is only of importance to you if
%# you choose to contribute your changes and enhancements to the
%# community by submitting them to Best Practical Solutions, LLC.)
%# 
%# By intentionally submitting any modifications, corrections or
%# derivatives to this work, or any other work intended for use with
%# Request Tracker, to Best Practical Solutions, LLC, you confirm that
%# you are the copyright holder for those contributions and you grant
%# Best Practical Solutions,  LLC a nonexclusive, worldwide, irrevocable,
%# royalty-free, perpetual, license to use, copy, create derivative
%# works based on those contributions, and sublicense and distribute
%# those contributions and any derivatives thereof.
%# 
%# END BPS TAGGED BLOCK }}}

<div id="announce">
<table class="announce">
%my $rows = 1;
%#while( my $ticket = $tickets->Next ){
%foreach my $ticket ( @tickets ){
  <tr><td class="announce_subject">
% if( $show_ticket_links ){
  <a class="announce_subject"
     href="<% RT->Config->Get('WebPath') %>/Ticket/Display.html?id=<% $ticket->Id %>">
  <% $ticket->Subject %></a>
% }else{
  <% $ticket->Subject %>
% }
  </td>
  <td>
<%perl>
  my $txns = $ticket->Transactions;
  for my $type ( qw(Create Comment Correspond) ){
      $txns->Limit( FIELD => 'Type', VALUE => $type );
  }
  $txns->OrderBy( FIELD => 'Created', ORDER => 'DESC' );
  $txns->RowsPerPage(1);
  my $content_obj = $txns->First->ContentObj;
  my $content = $content_obj->Content;
  if( length $content > $MaxMessageLength ){
    $content = substr($content, 0, $MaxMessageLength);
    # Try to break at a word boundary.
    $content =~ s/^(.*)\b\w+$/$1/g;
    $content =~ s/\s+$//g; # Remove trailing space
    $content .= chr(8230); # Ellipsis character
  }
</%perl>
<% $content %>
%if( $show_ticket_links){
 (<a class="announcements_detail" href="<% RT->Config->Get('WebPath') %>/Ticket/Display.html?id=<% $ticket->Id %>">more</a>)
%}
</td></tr>
% if( $rows == $ShowTickets && (scalar @tickets) > $ShowTickets ){
%   # More announcements, initially hidden.
<tr><td colspan=2 class="toggle_announcements">
<a href='#' class="toggle_announcements" id="toggle_announcements">More Announcements</a>
</td></tr>
<tbody id="more_announcements">
% }
%$rows++;
%}
%if( $rows >= $ShowTickets ){
</tbody>
%}
</table></div>
<%INIT>
# Only display on Homepage
return unless ( $m->request_comp->path =~ /^\/index.html$/ );

my $Queue = RT::Queue->new( $session{'CurrentUser'} );
$Queue->Load('RTAnnounce');
unless( $Queue->Id ){
  $RT::Logger->error('RTAnnounce queue not found for Announce extension. Did you run make initdb?');
  return;
}

my @tickets;

# Get announce tickets.
my $tickets = RT::Tickets->new( RT->SystemUser );
$tickets->OrderBy( FIELD => 'LastUpdated', ORDER => 'ASC' );
$tickets->FromSQL("Queue = 'RTAnnounce' AND ( Status = 'new' OR Status = 'open' )");
return if $tickets->Count == 0;

# Get groups for each ticket
while( my $ticket = $tickets->Next ){

  my $groups = $ticket->CustomFieldValues('Announcement Groups');

  if( $groups->Count == 0 ){
    # No groups defined, everyone sees announcement
    push @tickets, $ticket;
  }

  my @groups;
  while ( my $group = $groups->Next ){
    push @groups, $group->Content;
  }

  foreach my $group_name ( @groups ){
    my $group_obj = RT::Group->new(RT->SystemUser);
    $group_obj->LoadUserDefinedGroup($group_name);

    unless( $group_obj->Id && $group_obj->Name eq $group_name ){
      $RT::Logger->error("$group_name is not a valid group. Not showing this announcement.");
      next;
    }

    if ( $group_obj->HasMemberRecursively($session{'CurrentUser'}->PrincipalObj) ) {
      # User can see this announcement.
      push @tickets, $ticket;
    }
    else{
      $RT::Logger->debug('Not showing announcement ticket ' . $ticket->Id
        . ' to user ' . $session{'CurrentUser'}->Name . ' because they are not '
        . 'in group ' . $group_name );
    }
  }
}

# Don't show links if users can't view the announce tickets.
my $show_ticket_links = $tickets[0]->HasRight(
                          Right     => 'ShowTicket',
                          Principal => $session{'CurrentUser'} );

unless( $show_ticket_links ){
  $RT::Logger->debug('User ' . $session{'CurrentUser'}->Name . ' does not have '
    . 'the ShowTicket right on the RTAnnounce queue and will not see links to '
    . 'announcement tickets.');
}

</%INIT>
<%ARGS>
$ShowTickets => 2
$MaxMessageLength => 300
</%ARGS>
